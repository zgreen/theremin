{"version":3,"sources":["webpack:///app.bundle.js","webpack:///webpack/bootstrap 5a594a14d2d31bb03dc7","webpack:///./src/app.js","webpack:///./src/AbernyteGrainSilo.m4a","webpack:///./~/arraybuffer-loader/lib/to-array-buffer.js","webpack:///./src/app.css","webpack:///./~/css-loader/lib/css-base.js","webpack:///./src/view.html","webpack:///./~/isomorphic-fetch/fetch-npm-browserify.js","webpack:///./~/style-loader/addStyles.js","webpack:///./src/app.css?fa77","webpack:///./~/whatwg-fetch/fetch.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","_interopRequireWildcard","obj","__esModule","newObj","key","Object","prototype","hasOwnProperty","default","_interopRequireDefault","initAudio","shouldDisconnect","audioCtx","decodeAudioData","_AbernyteGrainSilo2","then","data","state","convolver","disconnect","gain","buffer","connect","oscillator","destination","frequency","value","start","getNotes","_isomorphicFetch2","resp","json","curNotes","initView","_view2","classList","add","styles","view","viewEls","overlay","addEventListener","e","target","remove","controls","allowedNotes","notes","currentScale","map","note","idx","el","document","createElement","label","input","innerHTML","name","type","setAttribute","appendChild","disabled","checked","reduce","init","cur","waves","wave","join","clampToNote","bufferSrc","preventDefault","toggleVibrato","setVibrato","vibratoRate","vibrato","rate","vibratoAmplitube","amplitude","body","ampl","clearInterval","interval","setInterval","setBackround","x","y","style","background","step","activeScale","filter","vol","clientY","window","innerHeight","freq","clientX","innerWidth","curNote","acc","isNatural","length","Array","isArray","indexOf","substr","push","noteDisplay","detune","val","Math","abs","_extends","dir","assign","i","arguments","source","_isomorphicFetch","_app","_AbernyteGrainSilo","_view","AudioContext","createConvolver","createGain","createOscillator","overlayVisible","querySelector","base64Data","binary","atob","bytes","Uint8Array","charCodeAt","locals","currentNote","list","toString","result","this","item","mediaQuery","alreadyImportedModules","elm","self","fetch","bind","addStylesToDom","options","domStyle","stylesInDom","refs","j","parts","addStyle","listToStyles","newStyles","css","media","sourceMap","part","insertStyleElement","styleElement","head","getHeadElement","lastStyleElementInsertedAtTop","styleElementsInsertedAtTop","insertAt","nextSibling","insertBefore","firstChild","Error","removeStyleElement","parentNode","removeChild","splice","createStyleElement","createLinkElement","linkElement","rel","update","singleton","styleIndex","singletonCounter","singletonElement","applyToSingletonTag","URL","createObjectURL","revokeObjectURL","Blob","btoa","updateLink","href","applyToTag","index","styleSheet","cssText","replaceText","cssNode","createTextNode","childNodes","unescape","encodeURIComponent","JSON","stringify","blob","oldSrc","memoize","fn","memo","apply","isOldIE","test","navigator","userAgent","toLowerCase","getElementsByTagName","newList","mayRemove","textStore","replacement","Boolean","content","normalizeName","String","TypeError","normalizeValue","iteratorFor","items","iterator","next","shift","done","undefined","support","iterable","Symbol","Headers","headers","forEach","append","getOwnPropertyNames","consumed","bodyUsed","Promise","reject","fileReaderReady","reader","resolve","onload","onerror","error","readBlobAsArrayBuffer","FileReader","promise","readAsArrayBuffer","readBlobAsText","readAsText","readArrayBufferAsText","buf","chars","fromCharCode","bufferClone","slice","byteLength","set","Body","_initBody","_bodyInit","_bodyText","isPrototypeOf","_bodyBlob","formData","FormData","_bodyFormData","searchParams","URLSearchParams","arrayBuffer","isDataView","_bodyArrayBuffer","ArrayBuffer","isArrayBufferView","get","rejected","text","decode","parse","normalizeMethod","method","upcased","toUpperCase","methods","Request","url","credentials","mode","referrer","form","trim","split","replace","decodeURIComponent","parseHeaders","rawHeaders","line","Response","bodyInit","status","ok","statusText","viewClasses","DataView","isView","oldValue","has","callback","thisArg","keys","values","entries","clone","response","redirectStatuses","redirect","RangeError","location","request","xhr","XMLHttpRequest","getAllResponseHeaders","responseURL","responseText","ontimeout","open","withCredentials","responseType","setRequestHeader","send","polyfill"],"mappings":"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","file":"app.bundle.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"/build/\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/*!********************!*\\\n  !*** ./src/app.js ***!\n  \\********************/\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\t\n\tvar _isomorphicFetch = __webpack_require__(/*! isomorphic-fetch */ 6);\n\t\n\tvar _isomorphicFetch2 = _interopRequireDefault(_isomorphicFetch);\n\t\n\tvar _app = __webpack_require__(/*! ./app.css */ 8);\n\t\n\tvar styles = _interopRequireWildcard(_app);\n\t\n\tvar _AbernyteGrainSilo = __webpack_require__(/*! arraybuffer!./AbernyteGrainSilo.m4a */ 1);\n\t\n\tvar _AbernyteGrainSilo2 = _interopRequireDefault(_AbernyteGrainSilo);\n\t\n\tvar _view = __webpack_require__(/*! ./view.html */ 5);\n\t\n\tvar _view2 = _interopRequireDefault(_view);\n\t\n\tfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\t/**\n\t * Audio.\n\t */\n\tvar audioCtx = new window.AudioContext();\n\t\n\t/**\n\t * App state.\n\t */\n\tvar state = {\n\t  currentScale: [{ name: 'c', disabled: false }, { name: 'c#', disabled: false }, { name: 'd', disabled: false }, { name: 'd#', disabled: false }, { name: 'e', disabled: false }, { name: 'f', disabled: false }, { name: 'f#', disabled: false }, { name: 'g', disabled: false }, { name: 'g#', disabled: false }, { name: 'a', disabled: false }, { name: 'a#', disabled: false }, { name: 'b', disabled: false }],\n\t  clampToNote: false,\n\t  convolver: audioCtx.createConvolver(),\n\t  curNotes: [],\n\t  gain: audioCtx.createGain(),\n\t  oscillator: audioCtx.createOscillator(),\n\t  waves: ['sine', 'square', 'sawtooth', 'triangle'],\n\t  overlayVisible: true,\n\t  // view: document.createElement('div'),\n\t  viewEls: {\n\t    allowedNotes: _view2.default.querySelector('#allowed-notes'),\n\t    bufferSrc: _view2.default.querySelector('#custom-buffer-source'),\n\t    clampToNote: _view2.default.querySelector('#clamp-to-note'),\n\t    controls: _view2.default.querySelector('#controls'),\n\t    vibratoAmplitube: _view2.default.querySelector('#vibrato-amplitude'),\n\t    vibratoRate: _view2.default.querySelector('#vibrato-rate'),\n\t    noteDisplay: _view2.default.querySelector('#note-display'),\n\t    overlay: _view2.default.querySelector('#overlay'),\n\t    toggleVibrato: _view2.default.querySelector('#enable-vibrato'),\n\t    waves: _view2.default.querySelector('#waves')\n\t  },\n\t  vibrato: { dir: 1, val: 1, rate: 10, amplitude: 5, interval: function interval() {} }\n\t};\n\t\n\t/**\n\t * Audio.\n\t */\n\tfunction initAudio(shouldDisconnect) {\n\t  audioCtx.decodeAudioData(_AbernyteGrainSilo2.default).then(function (data) {\n\t    if (shouldDisconnect) {\n\t      state.convolver.disconnect(state.gain);\n\t    }\n\t    state.convolver.buffer = data;\n\t    state.convolver.connect(state.gain);\n\t    state.oscillator.connect(state.gain);\n\t    state.gain.connect(audioCtx.destination);\n\t    state.oscillator.frequency.value = 0;\n\t    state.oscillator.start();\n\t  });\n\t}\n\t\n\t/**\n\t * Fetch frequency data.\n\t */\n\tfunction getNotes() {\n\t  (0, _isomorphicFetch2.default)('/src/music-freqs.json').then(function (resp) {\n\t    return resp.json();\n\t  }).then(function (resp) {\n\t    state.curNotes = resp;\n\t  });\n\t}\n\t\n\t/**\n\t * View.\n\t */\n\tfunction initView() {\n\t  // View parent\n\t  _view2.default.classList.add(styles.view);\n\t  // Overlay\n\t  state.viewEls.overlay.classList.add(styles.overlay);\n\t  state.viewEls.overlay.addEventListener('click', function (e) {\n\t    e.target.remove();\n\t    initAudio();\n\t  });\n\t  // Controls\n\t  state.viewEls.controls.classList.add(styles.controls);\n\t  // Add allowed notes\n\t  state.viewEls.allowedNotes.classList.add(styles.notes);\n\t  state.currentScale.map(function (note, idx) {\n\t    var el = document.createElement('div');\n\t    var label = document.createElement('label');\n\t    var input = document.createElement('input');\n\t    label.innerHTML = note.name;\n\t    input.type = 'checkbox';\n\t    input.setAttribute('checked', true);\n\t    el.appendChild(label);\n\t    el.appendChild(input);\n\t    input.addEventListener('click', function (e) {\n\t      state.currentScale[idx].disabled = !input.checked;\n\t    });\n\t    return el;\n\t  }).reduce(function (init, cur) {\n\t    state.viewEls.allowedNotes.appendChild(cur);\n\t    return init;\n\t  }, []);\n\t  // Add waves\n\t  state.viewEls.waves.innerHTML = state.waves.map(function (wave) {\n\t    return '<option value=\"' + wave + '\">' + wave + '</option>';\n\t  }).join('');\n\t  state.viewEls.waves.addEventListener('click', function (e) {\n\t    state.gain.gain.value = 0;\n\t  });\n\t  state.viewEls.waves.addEventListener('change', function (e) {\n\t    state.oscillator.type = e.target.value;\n\t  });\n\t\n\t  state.viewEls.clampToNote.addEventListener('click', function (e) {\n\t    state.clampToNote = !state.clampToNote;\n\t  });\n\t  state.viewEls.bufferSrc.addEventListener('submit', function (e) {\n\t    e.preventDefault();\n\t    // setBuffer(state.convolver, bufferInput.value)\n\t  });\n\t  state.viewEls.toggleVibrato.addEventListener('click', function () {\n\t    setVibrato();\n\t  });\n\t\n\t  state.viewEls.vibratoRate.value = state.vibrato.rate;\n\t  state.viewEls.vibratoAmplitube.value = state.vibrato.amplitude;\n\t  state.viewEls.vibratoRate.addEventListener('change', function () {\n\t    setVibrato(setVibrato(state.viewEls.vibratoRate.value));\n\t  });\n\t  state.viewEls.vibratoAmplitube.addEventListener('change', function () {\n\t    setVibrato(state.vibrato.rate, state.viewEls.vibratoAmplitube.value);\n\t  });\n\t  document.body.appendChild(_view2.default);\n\t}\n\t\n\tfunction setVibrato(rate, ampl) {\n\t  if (rate || ampl) {\n\t    clearInterval(state.vibrato.interval);\n\t    state.vibrato.rate = rate;\n\t    state.vibrato.amplitude = ampl;\n\t    state.vibrato.interval = setInterval(vibrato, state.vibrato.rate);\n\t  } else if (state.viewEls.toggleVibrato.checked) {\n\t    state.vibrato.interval = setInterval(vibrato, state.vibrato.rate);\n\t  } else {\n\t    clearInterval(state.vibrato.interval);\n\t  }\n\t}\n\t\n\tfunction setBackround(x, y) {\n\t  _view2.default.style.background = 'hsla(' + x + ', ' + y + '%, 50%, 1)';\n\t}\n\t\n\tfunction step(e) {\n\t  var activeScale = state.currentScale.filter(function (note) {\n\t    return !note.disabled;\n\t  }).map(function (note) {\n\t    return note.name;\n\t  });\n\t  var vol = -1 * e.clientY / window.innerHeight + 1;\n\t  state.gain.gain.value = state.oscillator.type === 'sine' || state.oscillator.type === 'triangle' ? vol : vol / 10;\n\t  var freq = e.clientX / window.innerWidth * 440 + 100;\n\t  var curNote = state.clampToNote ? state.curNotes.reduce(function (acc, cur) {\n\t    var isNatural = cur.note.length === 2;\n\t    if (Array.isArray(acc)) {\n\t      if (activeScale.indexOf(cur.note.substr(0, isNatural ? 1 : 2)) !== -1 && cur.frequency < freq) {\n\t        acc.push(cur);\n\t      }\n\t      if (activeScale.indexOf(cur.note.substr(0, isNatural ? 1 : 2)) !== -1 && cur.frequency > freq) {\n\t        acc = acc[acc.length - 1];\n\t      }\n\t    }\n\t    return acc;\n\t  }, []) : { frequency: freq, note: 'n/a' };\n\t  state.oscillator.frequency.value = curNote.frequency;\n\t  state.viewEls.noteDisplay.innerHTML = 'Current note: ' + curNote.note;\n\t  setBackround(240 + e.clientX / window.innerWidth * 100, vol * 100);\n\t  /**\n\t   * rAF Makes Chrome sound terrible.\n\t   */\n\t  // window.requestAnimationFrame(step.bind(null, e))\n\t}\n\t\n\tfunction vibrato() {\n\t  state.oscillator.detune.value = state.oscillator.detune.value + state.vibrato.val;\n\t  if (Math.abs(state.vibrato.val) > state.vibrato.amplitude) {\n\t    state.vibrato = _extends({}, state.vibrato, { dir: state.vibrato.dir * -1, val: state.vibrato.val - state.vibrato.dir * 1 });\n\t  } else {\n\t    state.vibrato.val = state.vibrato.val + state.vibrato.dir * 1;\n\t  }\n\t}\n\t\n\t(function theremin() {\n\t  getNotes();\n\t  initView();\n\t  document.addEventListener('mousemove', step);\n\t})();\n\t\n\tif (false) {\n\t  module.hot.accept();\n\t}\n\n/***/ },\n/* 1 */\n/*!**********************************************************!*\\\n  !*** ./~/arraybuffer-loader!./src/AbernyteGrainSilo.m4a ***!\n  \\**********************************************************/\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(/*! ./../~/arraybuffer-loader/lib/to-array-buffer.js */ 2)(\"\")\n\n/***/ },\n/* 2 */\n/*!*****************************************************!*\\\n  !*** ./~/arraybuffer-loader/lib/to-array-buffer.js ***!\n  \\*****************************************************/\n/***/ function(module, exports) {\n\n\t'use strict'\n\t\n\t// * To be run on any browser\n\tmodule.exports = function (base64Data) {\n\t  var binary = window.atob(base64Data)\n\t  var bytes  = new Uint8Array(binary.length)\n\t\n\t  for (var i = 0; i < binary.length; ++i) {\n\t    bytes[i] = binary.charCodeAt(i)\n\t  }\n\t\n\t  return bytes.buffer\n\t}\n\n\n/***/ },\n/* 3 */\n/*!***************************************************************************************************************!*\\\n  !*** ./~/css-loader?modules&localIdentName=[name]__[local]__[hash:base64:5]!./~/postcss-loader!./src/app.css ***!\n  \\***************************************************************************************************************/\n/***/ function(module, exports, __webpack_require__) {\n\n\texports = module.exports = __webpack_require__(/*! ./../~/css-loader/lib/css-base.js */ 4)();\n\t// imports\n\t\n\t\n\t// module\n\texports.push([module.id, \"html{box-sizing:border-box}*,:after,:before{box-sizing:inherit}body{color:#fff;cursor:crosshair;font-family:monospace;margin:0;text-shadow:1px 0 0 #111,0 1px 0 #111,-1px 0 0 #111,0 -1px 0 #111}.app__view__1ORZ5{height:100vh;overflow:hidden;width:100vw}h1{text-align:center}.app__controls__vqhHa{align-items:stretch;border-top:1px solid #111;bottom:0;color:#fff;padding:1em;display:flex;font-size:1.5rem;flex-wrap:wrap;justify-content:space-around;position:fixed;width:100%}.app__controls__vqhHa>*{align-items:center;display:flex;flex:0 1 auto;justify-content:center}.app__controls__vqhHa select{align-self:center}.app__currentNote__2wMcs{width:33%}.app__notes__2Tggs{justify-content:center;width:100%}.app__notes__2Tggs>*{margin-right:1em}.app__notes__2Tggs>:last-child{margin-right:0}.app__overlay__31cgC{align-items:center;background:#111;display:flex;font-size:3em;height:100vh;padding:1em;position:absolute;top:0;width:100vw;z-index:1}\", \"\"]);\n\t\n\t// exports\n\texports.locals = {\n\t\t\"view\": \"app__view__1ORZ5\",\n\t\t\"controls\": \"app__controls__vqhHa\",\n\t\t\"currentNote\": \"app__currentNote__2wMcs\",\n\t\t\"notes\": \"app__notes__2Tggs\",\n\t\t\"overlay\": \"app__overlay__31cgC\"\n\t};\n\n/***/ },\n/* 4 */\n/*!**************************************!*\\\n  !*** ./~/css-loader/lib/css-base.js ***!\n  \\**************************************/\n/***/ function(module, exports) {\n\n\t/*\r\n\t\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\t\tAuthor Tobias Koppers @sokra\r\n\t*/\r\n\t// css base code, injected by the css-loader\r\n\tmodule.exports = function() {\r\n\t\tvar list = [];\r\n\t\r\n\t\t// return the list of modules as css string\r\n\t\tlist.toString = function toString() {\r\n\t\t\tvar result = [];\r\n\t\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\t\tvar item = this[i];\r\n\t\t\t\tif(item[2]) {\r\n\t\t\t\t\tresult.push(\"@media \" + item[2] + \"{\" + item[1] + \"}\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\tresult.push(item[1]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn result.join(\"\");\r\n\t\t};\r\n\t\r\n\t\t// import a list of modules into the list\r\n\t\tlist.i = function(modules, mediaQuery) {\r\n\t\t\tif(typeof modules === \"string\")\r\n\t\t\t\tmodules = [[null, modules, \"\"]];\r\n\t\t\tvar alreadyImportedModules = {};\r\n\t\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\t\tvar id = this[i][0];\r\n\t\t\t\tif(typeof id === \"number\")\r\n\t\t\t\t\talreadyImportedModules[id] = true;\r\n\t\t\t}\r\n\t\t\tfor(i = 0; i < modules.length; i++) {\r\n\t\t\t\tvar item = modules[i];\r\n\t\t\t\t// skip already imported module\r\n\t\t\t\t// this implementation is not 100% perfect for weird media query combinations\r\n\t\t\t\t//  when a module is imported multiple times with different media queries.\r\n\t\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\r\n\t\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\r\n\t\t\t\t\tif(mediaQuery && !item[2]) {\r\n\t\t\t\t\t\titem[2] = mediaQuery;\r\n\t\t\t\t\t} else if(mediaQuery) {\r\n\t\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlist.push(item);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\treturn list;\r\n\t};\r\n\n\n/***/ },\n/* 5 */\n/*!***********************!*\\\n  !*** ./src/view.html ***!\n  \\***********************/\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<div id=overlay>Heads up! This thing makes noise. It shouldn't be too loud, but consider turning down your speakers or headphones just in case. Click anywhere to begin.</div> <div id=theremin></div> <div id=controls> <label for=clamp-to-note>Clamp to note?</label> <input id=clamp-to-note type=checkbox> <form action=\\\"\\\"> <label for=custom-buffer-source>Set a custom buffer source</label> <input id=custom-buffer-source type=text placeholder=\\\"Paste a URL to an audio file to use a the buffer\\\"> <button type=submit>Get</button> </form> <form id=vibrato-settings action=\\\"\\\"> <label for=enable-vibrato>Enable vibrato?</label> <input id=enable-vibrato type=checkbox> <label for=vibrato-rate>Vibrato rate</label> <input id=vibrato-rate type=number> <label for=vibrato-amplitude>Vibrato amplitude</label> <input id=vibrato-amplitude type=number> </form> <select name=\\\"\\\" id=waves></select> <p id=note-display></p> <div id=allowed-notes></div> </div> \";\n\tvar elm = document.createElement(\"div\");\n\telm.innerHTML = module.exports;\n\tmodule.exports = elm;\n\n/***/ },\n/* 6 */\n/*!****************************************************!*\\\n  !*** ./~/isomorphic-fetch/fetch-npm-browserify.js ***!\n  \\****************************************************/\n/***/ function(module, exports, __webpack_require__) {\n\n\t// the whatwg-fetch polyfill installs the fetch() function\n\t// on the global object (window or self)\n\t//\n\t// Return that as the export for use in Webpack, Browserify etc.\n\t__webpack_require__(/*! whatwg-fetch */ 9);\n\tmodule.exports = self.fetch.bind(self);\n\n\n/***/ },\n/* 7 */\n/*!*************************************!*\\\n  !*** ./~/style-loader/addStyles.js ***!\n  \\*************************************/\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*\r\n\t\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\t\tAuthor Tobias Koppers @sokra\r\n\t*/\r\n\tvar stylesInDom = {},\r\n\t\tmemoize = function(fn) {\r\n\t\t\tvar memo;\r\n\t\t\treturn function () {\r\n\t\t\t\tif (typeof memo === \"undefined\") memo = fn.apply(this, arguments);\r\n\t\t\t\treturn memo;\r\n\t\t\t};\r\n\t\t},\r\n\t\tisOldIE = memoize(function() {\r\n\t\t\treturn /msie [6-9]\\b/.test(window.navigator.userAgent.toLowerCase());\r\n\t\t}),\r\n\t\tgetHeadElement = memoize(function () {\r\n\t\t\treturn document.head || document.getElementsByTagName(\"head\")[0];\r\n\t\t}),\r\n\t\tsingletonElement = null,\r\n\t\tsingletonCounter = 0,\r\n\t\tstyleElementsInsertedAtTop = [];\r\n\t\r\n\tmodule.exports = function(list, options) {\r\n\t\tif(false) {\r\n\t\t\tif(typeof document !== \"object\") throw new Error(\"The style-loader cannot be used in a non-browser environment\");\r\n\t\t}\r\n\t\r\n\t\toptions = options || {};\r\n\t\t// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\r\n\t\t// tags it will allow on a page\r\n\t\tif (typeof options.singleton === \"undefined\") options.singleton = isOldIE();\r\n\t\r\n\t\t// By default, add <style> tags to the bottom of <head>.\r\n\t\tif (typeof options.insertAt === \"undefined\") options.insertAt = \"bottom\";\r\n\t\r\n\t\tvar styles = listToStyles(list);\r\n\t\taddStylesToDom(styles, options);\r\n\t\r\n\t\treturn function update(newList) {\r\n\t\t\tvar mayRemove = [];\r\n\t\t\tfor(var i = 0; i < styles.length; i++) {\r\n\t\t\t\tvar item = styles[i];\r\n\t\t\t\tvar domStyle = stylesInDom[item.id];\r\n\t\t\t\tdomStyle.refs--;\r\n\t\t\t\tmayRemove.push(domStyle);\r\n\t\t\t}\r\n\t\t\tif(newList) {\r\n\t\t\t\tvar newStyles = listToStyles(newList);\r\n\t\t\t\taddStylesToDom(newStyles, options);\r\n\t\t\t}\r\n\t\t\tfor(var i = 0; i < mayRemove.length; i++) {\r\n\t\t\t\tvar domStyle = mayRemove[i];\r\n\t\t\t\tif(domStyle.refs === 0) {\r\n\t\t\t\t\tfor(var j = 0; j < domStyle.parts.length; j++)\r\n\t\t\t\t\t\tdomStyle.parts[j]();\r\n\t\t\t\t\tdelete stylesInDom[domStyle.id];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\t\r\n\tfunction addStylesToDom(styles, options) {\r\n\t\tfor(var i = 0; i < styles.length; i++) {\r\n\t\t\tvar item = styles[i];\r\n\t\t\tvar domStyle = stylesInDom[item.id];\r\n\t\t\tif(domStyle) {\r\n\t\t\t\tdomStyle.refs++;\r\n\t\t\t\tfor(var j = 0; j < domStyle.parts.length; j++) {\r\n\t\t\t\t\tdomStyle.parts[j](item.parts[j]);\r\n\t\t\t\t}\r\n\t\t\t\tfor(; j < item.parts.length; j++) {\r\n\t\t\t\t\tdomStyle.parts.push(addStyle(item.parts[j], options));\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tvar parts = [];\r\n\t\t\t\tfor(var j = 0; j < item.parts.length; j++) {\r\n\t\t\t\t\tparts.push(addStyle(item.parts[j], options));\r\n\t\t\t\t}\r\n\t\t\t\tstylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction listToStyles(list) {\r\n\t\tvar styles = [];\r\n\t\tvar newStyles = {};\r\n\t\tfor(var i = 0; i < list.length; i++) {\r\n\t\t\tvar item = list[i];\r\n\t\t\tvar id = item[0];\r\n\t\t\tvar css = item[1];\r\n\t\t\tvar media = item[2];\r\n\t\t\tvar sourceMap = item[3];\r\n\t\t\tvar part = {css: css, media: media, sourceMap: sourceMap};\r\n\t\t\tif(!newStyles[id])\r\n\t\t\t\tstyles.push(newStyles[id] = {id: id, parts: [part]});\r\n\t\t\telse\r\n\t\t\t\tnewStyles[id].parts.push(part);\r\n\t\t}\r\n\t\treturn styles;\r\n\t}\r\n\t\r\n\tfunction insertStyleElement(options, styleElement) {\r\n\t\tvar head = getHeadElement();\r\n\t\tvar lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];\r\n\t\tif (options.insertAt === \"top\") {\r\n\t\t\tif(!lastStyleElementInsertedAtTop) {\r\n\t\t\t\thead.insertBefore(styleElement, head.firstChild);\r\n\t\t\t} else if(lastStyleElementInsertedAtTop.nextSibling) {\r\n\t\t\t\thead.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);\r\n\t\t\t} else {\r\n\t\t\t\thead.appendChild(styleElement);\r\n\t\t\t}\r\n\t\t\tstyleElementsInsertedAtTop.push(styleElement);\r\n\t\t} else if (options.insertAt === \"bottom\") {\r\n\t\t\thead.appendChild(styleElement);\r\n\t\t} else {\r\n\t\t\tthrow new Error(\"Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.\");\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction removeStyleElement(styleElement) {\r\n\t\tstyleElement.parentNode.removeChild(styleElement);\r\n\t\tvar idx = styleElementsInsertedAtTop.indexOf(styleElement);\r\n\t\tif(idx >= 0) {\r\n\t\t\tstyleElementsInsertedAtTop.splice(idx, 1);\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction createStyleElement(options) {\r\n\t\tvar styleElement = document.createElement(\"style\");\r\n\t\tstyleElement.type = \"text/css\";\r\n\t\tinsertStyleElement(options, styleElement);\r\n\t\treturn styleElement;\r\n\t}\r\n\t\r\n\tfunction createLinkElement(options) {\r\n\t\tvar linkElement = document.createElement(\"link\");\r\n\t\tlinkElement.rel = \"stylesheet\";\r\n\t\tinsertStyleElement(options, linkElement);\r\n\t\treturn linkElement;\r\n\t}\r\n\t\r\n\tfunction addStyle(obj, options) {\r\n\t\tvar styleElement, update, remove;\r\n\t\r\n\t\tif (options.singleton) {\r\n\t\t\tvar styleIndex = singletonCounter++;\r\n\t\t\tstyleElement = singletonElement || (singletonElement = createStyleElement(options));\r\n\t\t\tupdate = applyToSingletonTag.bind(null, styleElement, styleIndex, false);\r\n\t\t\tremove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);\r\n\t\t} else if(obj.sourceMap &&\r\n\t\t\ttypeof URL === \"function\" &&\r\n\t\t\ttypeof URL.createObjectURL === \"function\" &&\r\n\t\t\ttypeof URL.revokeObjectURL === \"function\" &&\r\n\t\t\ttypeof Blob === \"function\" &&\r\n\t\t\ttypeof btoa === \"function\") {\r\n\t\t\tstyleElement = createLinkElement(options);\r\n\t\t\tupdate = updateLink.bind(null, styleElement);\r\n\t\t\tremove = function() {\r\n\t\t\t\tremoveStyleElement(styleElement);\r\n\t\t\t\tif(styleElement.href)\r\n\t\t\t\t\tURL.revokeObjectURL(styleElement.href);\r\n\t\t\t};\r\n\t\t} else {\r\n\t\t\tstyleElement = createStyleElement(options);\r\n\t\t\tupdate = applyToTag.bind(null, styleElement);\r\n\t\t\tremove = function() {\r\n\t\t\t\tremoveStyleElement(styleElement);\r\n\t\t\t};\r\n\t\t}\r\n\t\r\n\t\tupdate(obj);\r\n\t\r\n\t\treturn function updateStyle(newObj) {\r\n\t\t\tif(newObj) {\r\n\t\t\t\tif(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)\r\n\t\t\t\t\treturn;\r\n\t\t\t\tupdate(obj = newObj);\r\n\t\t\t} else {\r\n\t\t\t\tremove();\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\t\r\n\tvar replaceText = (function () {\r\n\t\tvar textStore = [];\r\n\t\r\n\t\treturn function (index, replacement) {\r\n\t\t\ttextStore[index] = replacement;\r\n\t\t\treturn textStore.filter(Boolean).join('\\n');\r\n\t\t};\r\n\t})();\r\n\t\r\n\tfunction applyToSingletonTag(styleElement, index, remove, obj) {\r\n\t\tvar css = remove ? \"\" : obj.css;\r\n\t\r\n\t\tif (styleElement.styleSheet) {\r\n\t\t\tstyleElement.styleSheet.cssText = replaceText(index, css);\r\n\t\t} else {\r\n\t\t\tvar cssNode = document.createTextNode(css);\r\n\t\t\tvar childNodes = styleElement.childNodes;\r\n\t\t\tif (childNodes[index]) styleElement.removeChild(childNodes[index]);\r\n\t\t\tif (childNodes.length) {\r\n\t\t\t\tstyleElement.insertBefore(cssNode, childNodes[index]);\r\n\t\t\t} else {\r\n\t\t\t\tstyleElement.appendChild(cssNode);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction applyToTag(styleElement, obj) {\r\n\t\tvar css = obj.css;\r\n\t\tvar media = obj.media;\r\n\t\r\n\t\tif(media) {\r\n\t\t\tstyleElement.setAttribute(\"media\", media)\r\n\t\t}\r\n\t\r\n\t\tif(styleElement.styleSheet) {\r\n\t\t\tstyleElement.styleSheet.cssText = css;\r\n\t\t} else {\r\n\t\t\twhile(styleElement.firstChild) {\r\n\t\t\t\tstyleElement.removeChild(styleElement.firstChild);\r\n\t\t\t}\r\n\t\t\tstyleElement.appendChild(document.createTextNode(css));\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction updateLink(linkElement, obj) {\r\n\t\tvar css = obj.css;\r\n\t\tvar sourceMap = obj.sourceMap;\r\n\t\r\n\t\tif(sourceMap) {\r\n\t\t\t// http://stackoverflow.com/a/26603875\r\n\t\t\tcss += \"\\n/*# sourceMappingURL=data:application/json;base64,\" + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + \" */\";\r\n\t\t}\r\n\t\r\n\t\tvar blob = new Blob([css], { type: \"text/css\" });\r\n\t\r\n\t\tvar oldSrc = linkElement.href;\r\n\t\r\n\t\tlinkElement.href = URL.createObjectURL(blob);\r\n\t\r\n\t\tif(oldSrc)\r\n\t\t\tURL.revokeObjectURL(oldSrc);\r\n\t}\r\n\n\n/***/ },\n/* 8 */\n/*!*********************!*\\\n  !*** ./src/app.css ***!\n  \\*********************/\n/***/ function(module, exports, __webpack_require__) {\n\n\t// style-loader: Adds some css to the DOM by adding a <style> tag\n\t\n\t// load the styles\n\tvar content = __webpack_require__(/*! !./../~/css-loader?modules&localIdentName=[name]__[local]__[hash:base64:5]!./../~/postcss-loader!./app.css */ 3);\n\tif(typeof content === 'string') content = [[module.id, content, '']];\n\t// add the styles to the DOM\n\tvar update = __webpack_require__(/*! ./../~/style-loader/addStyles.js */ 7)(content, {});\n\tif(content.locals) module.exports = content.locals;\n\t// Hot Module Replacement\n\tif(false) {\n\t\t// When the styles change, update the <style> tags\n\t\tif(!content.locals) {\n\t\t\tmodule.hot.accept(\"!!./../node_modules/css-loader/index.js?modules&localIdentName=[name]__[local]__[hash:base64:5]!./../node_modules/postcss-loader/index.js!./app.css\", function() {\n\t\t\t\tvar newContent = require(\"!!./../node_modules/css-loader/index.js?modules&localIdentName=[name]__[local]__[hash:base64:5]!./../node_modules/postcss-loader/index.js!./app.css\");\n\t\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\t\tupdate(newContent);\n\t\t\t});\n\t\t}\n\t\t// When the module is disposed, remove the <style> tags\n\t\tmodule.hot.dispose(function() { update(); });\n\t}\n\n/***/ },\n/* 9 */\n/*!*********************************!*\\\n  !*** ./~/whatwg-fetch/fetch.js ***!\n  \\*********************************/\n/***/ function(module, exports) {\n\n\t(function(self) {\n\t  'use strict';\n\t\n\t  if (self.fetch) {\n\t    return\n\t  }\n\t\n\t  var support = {\n\t    searchParams: 'URLSearchParams' in self,\n\t    iterable: 'Symbol' in self && 'iterator' in Symbol,\n\t    blob: 'FileReader' in self && 'Blob' in self && (function() {\n\t      try {\n\t        new Blob()\n\t        return true\n\t      } catch(e) {\n\t        return false\n\t      }\n\t    })(),\n\t    formData: 'FormData' in self,\n\t    arrayBuffer: 'ArrayBuffer' in self\n\t  }\n\t\n\t  if (support.arrayBuffer) {\n\t    var viewClasses = [\n\t      '[object Int8Array]',\n\t      '[object Uint8Array]',\n\t      '[object Uint8ClampedArray]',\n\t      '[object Int16Array]',\n\t      '[object Uint16Array]',\n\t      '[object Int32Array]',\n\t      '[object Uint32Array]',\n\t      '[object Float32Array]',\n\t      '[object Float64Array]'\n\t    ]\n\t\n\t    var isDataView = function(obj) {\n\t      return obj && DataView.prototype.isPrototypeOf(obj)\n\t    }\n\t\n\t    var isArrayBufferView = ArrayBuffer.isView || function(obj) {\n\t      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n\t    }\n\t  }\n\t\n\t  function normalizeName(name) {\n\t    if (typeof name !== 'string') {\n\t      name = String(name)\n\t    }\n\t    if (/[^a-z0-9\\-#$%&'*+.\\^_`|~]/i.test(name)) {\n\t      throw new TypeError('Invalid character in header field name')\n\t    }\n\t    return name.toLowerCase()\n\t  }\n\t\n\t  function normalizeValue(value) {\n\t    if (typeof value !== 'string') {\n\t      value = String(value)\n\t    }\n\t    return value\n\t  }\n\t\n\t  // Build a destructive iterator for the value list\n\t  function iteratorFor(items) {\n\t    var iterator = {\n\t      next: function() {\n\t        var value = items.shift()\n\t        return {done: value === undefined, value: value}\n\t      }\n\t    }\n\t\n\t    if (support.iterable) {\n\t      iterator[Symbol.iterator] = function() {\n\t        return iterator\n\t      }\n\t    }\n\t\n\t    return iterator\n\t  }\n\t\n\t  function Headers(headers) {\n\t    this.map = {}\n\t\n\t    if (headers instanceof Headers) {\n\t      headers.forEach(function(value, name) {\n\t        this.append(name, value)\n\t      }, this)\n\t\n\t    } else if (headers) {\n\t      Object.getOwnPropertyNames(headers).forEach(function(name) {\n\t        this.append(name, headers[name])\n\t      }, this)\n\t    }\n\t  }\n\t\n\t  Headers.prototype.append = function(name, value) {\n\t    name = normalizeName(name)\n\t    value = normalizeValue(value)\n\t    var oldValue = this.map[name]\n\t    this.map[name] = oldValue ? oldValue+','+value : value\n\t  }\n\t\n\t  Headers.prototype['delete'] = function(name) {\n\t    delete this.map[normalizeName(name)]\n\t  }\n\t\n\t  Headers.prototype.get = function(name) {\n\t    name = normalizeName(name)\n\t    return this.has(name) ? this.map[name] : null\n\t  }\n\t\n\t  Headers.prototype.has = function(name) {\n\t    return this.map.hasOwnProperty(normalizeName(name))\n\t  }\n\t\n\t  Headers.prototype.set = function(name, value) {\n\t    this.map[normalizeName(name)] = normalizeValue(value)\n\t  }\n\t\n\t  Headers.prototype.forEach = function(callback, thisArg) {\n\t    for (var name in this.map) {\n\t      if (this.map.hasOwnProperty(name)) {\n\t        callback.call(thisArg, this.map[name], name, this)\n\t      }\n\t    }\n\t  }\n\t\n\t  Headers.prototype.keys = function() {\n\t    var items = []\n\t    this.forEach(function(value, name) { items.push(name) })\n\t    return iteratorFor(items)\n\t  }\n\t\n\t  Headers.prototype.values = function() {\n\t    var items = []\n\t    this.forEach(function(value) { items.push(value) })\n\t    return iteratorFor(items)\n\t  }\n\t\n\t  Headers.prototype.entries = function() {\n\t    var items = []\n\t    this.forEach(function(value, name) { items.push([name, value]) })\n\t    return iteratorFor(items)\n\t  }\n\t\n\t  if (support.iterable) {\n\t    Headers.prototype[Symbol.iterator] = Headers.prototype.entries\n\t  }\n\t\n\t  function consumed(body) {\n\t    if (body.bodyUsed) {\n\t      return Promise.reject(new TypeError('Already read'))\n\t    }\n\t    body.bodyUsed = true\n\t  }\n\t\n\t  function fileReaderReady(reader) {\n\t    return new Promise(function(resolve, reject) {\n\t      reader.onload = function() {\n\t        resolve(reader.result)\n\t      }\n\t      reader.onerror = function() {\n\t        reject(reader.error)\n\t      }\n\t    })\n\t  }\n\t\n\t  function readBlobAsArrayBuffer(blob) {\n\t    var reader = new FileReader()\n\t    var promise = fileReaderReady(reader)\n\t    reader.readAsArrayBuffer(blob)\n\t    return promise\n\t  }\n\t\n\t  function readBlobAsText(blob) {\n\t    var reader = new FileReader()\n\t    var promise = fileReaderReady(reader)\n\t    reader.readAsText(blob)\n\t    return promise\n\t  }\n\t\n\t  function readArrayBufferAsText(buf) {\n\t    var view = new Uint8Array(buf)\n\t    var chars = new Array(view.length)\n\t\n\t    for (var i = 0; i < view.length; i++) {\n\t      chars[i] = String.fromCharCode(view[i])\n\t    }\n\t    return chars.join('')\n\t  }\n\t\n\t  function bufferClone(buf) {\n\t    if (buf.slice) {\n\t      return buf.slice(0)\n\t    } else {\n\t      var view = new Uint8Array(buf.byteLength)\n\t      view.set(new Uint8Array(buf))\n\t      return view.buffer\n\t    }\n\t  }\n\t\n\t  function Body() {\n\t    this.bodyUsed = false\n\t\n\t    this._initBody = function(body) {\n\t      this._bodyInit = body\n\t      if (!body) {\n\t        this._bodyText = ''\n\t      } else if (typeof body === 'string') {\n\t        this._bodyText = body\n\t      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n\t        this._bodyBlob = body\n\t      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n\t        this._bodyFormData = body\n\t      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n\t        this._bodyText = body.toString()\n\t      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n\t        this._bodyArrayBuffer = bufferClone(body.buffer)\n\t        // IE 10-11 can't handle a DataView body.\n\t        this._bodyInit = new Blob([this._bodyArrayBuffer])\n\t      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n\t        this._bodyArrayBuffer = bufferClone(body)\n\t      } else {\n\t        throw new Error('unsupported BodyInit type')\n\t      }\n\t\n\t      if (!this.headers.get('content-type')) {\n\t        if (typeof body === 'string') {\n\t          this.headers.set('content-type', 'text/plain;charset=UTF-8')\n\t        } else if (this._bodyBlob && this._bodyBlob.type) {\n\t          this.headers.set('content-type', this._bodyBlob.type)\n\t        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n\t          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')\n\t        }\n\t      }\n\t    }\n\t\n\t    if (support.blob) {\n\t      this.blob = function() {\n\t        var rejected = consumed(this)\n\t        if (rejected) {\n\t          return rejected\n\t        }\n\t\n\t        if (this._bodyBlob) {\n\t          return Promise.resolve(this._bodyBlob)\n\t        } else if (this._bodyArrayBuffer) {\n\t          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n\t        } else if (this._bodyFormData) {\n\t          throw new Error('could not read FormData body as blob')\n\t        } else {\n\t          return Promise.resolve(new Blob([this._bodyText]))\n\t        }\n\t      }\n\t\n\t      this.arrayBuffer = function() {\n\t        if (this._bodyArrayBuffer) {\n\t          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n\t        } else {\n\t          return this.blob().then(readBlobAsArrayBuffer)\n\t        }\n\t      }\n\t    }\n\t\n\t    this.text = function() {\n\t      var rejected = consumed(this)\n\t      if (rejected) {\n\t        return rejected\n\t      }\n\t\n\t      if (this._bodyBlob) {\n\t        return readBlobAsText(this._bodyBlob)\n\t      } else if (this._bodyArrayBuffer) {\n\t        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n\t      } else if (this._bodyFormData) {\n\t        throw new Error('could not read FormData body as text')\n\t      } else {\n\t        return Promise.resolve(this._bodyText)\n\t      }\n\t    }\n\t\n\t    if (support.formData) {\n\t      this.formData = function() {\n\t        return this.text().then(decode)\n\t      }\n\t    }\n\t\n\t    this.json = function() {\n\t      return this.text().then(JSON.parse)\n\t    }\n\t\n\t    return this\n\t  }\n\t\n\t  // HTTP methods whose capitalization should be normalized\n\t  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n\t\n\t  function normalizeMethod(method) {\n\t    var upcased = method.toUpperCase()\n\t    return (methods.indexOf(upcased) > -1) ? upcased : method\n\t  }\n\t\n\t  function Request(input, options) {\n\t    options = options || {}\n\t    var body = options.body\n\t\n\t    if (typeof input === 'string') {\n\t      this.url = input\n\t    } else {\n\t      if (input.bodyUsed) {\n\t        throw new TypeError('Already read')\n\t      }\n\t      this.url = input.url\n\t      this.credentials = input.credentials\n\t      if (!options.headers) {\n\t        this.headers = new Headers(input.headers)\n\t      }\n\t      this.method = input.method\n\t      this.mode = input.mode\n\t      if (!body && input._bodyInit != null) {\n\t        body = input._bodyInit\n\t        input.bodyUsed = true\n\t      }\n\t    }\n\t\n\t    this.credentials = options.credentials || this.credentials || 'omit'\n\t    if (options.headers || !this.headers) {\n\t      this.headers = new Headers(options.headers)\n\t    }\n\t    this.method = normalizeMethod(options.method || this.method || 'GET')\n\t    this.mode = options.mode || this.mode || null\n\t    this.referrer = null\n\t\n\t    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n\t      throw new TypeError('Body not allowed for GET or HEAD requests')\n\t    }\n\t    this._initBody(body)\n\t  }\n\t\n\t  Request.prototype.clone = function() {\n\t    return new Request(this, { body: this._bodyInit })\n\t  }\n\t\n\t  function decode(body) {\n\t    var form = new FormData()\n\t    body.trim().split('&').forEach(function(bytes) {\n\t      if (bytes) {\n\t        var split = bytes.split('=')\n\t        var name = split.shift().replace(/\\+/g, ' ')\n\t        var value = split.join('=').replace(/\\+/g, ' ')\n\t        form.append(decodeURIComponent(name), decodeURIComponent(value))\n\t      }\n\t    })\n\t    return form\n\t  }\n\t\n\t  function parseHeaders(rawHeaders) {\n\t    var headers = new Headers()\n\t    rawHeaders.split('\\r\\n').forEach(function(line) {\n\t      var parts = line.split(':')\n\t      var key = parts.shift().trim()\n\t      if (key) {\n\t        var value = parts.join(':').trim()\n\t        headers.append(key, value)\n\t      }\n\t    })\n\t    return headers\n\t  }\n\t\n\t  Body.call(Request.prototype)\n\t\n\t  function Response(bodyInit, options) {\n\t    if (!options) {\n\t      options = {}\n\t    }\n\t\n\t    this.type = 'default'\n\t    this.status = 'status' in options ? options.status : 200\n\t    this.ok = this.status >= 200 && this.status < 300\n\t    this.statusText = 'statusText' in options ? options.statusText : 'OK'\n\t    this.headers = new Headers(options.headers)\n\t    this.url = options.url || ''\n\t    this._initBody(bodyInit)\n\t  }\n\t\n\t  Body.call(Response.prototype)\n\t\n\t  Response.prototype.clone = function() {\n\t    return new Response(this._bodyInit, {\n\t      status: this.status,\n\t      statusText: this.statusText,\n\t      headers: new Headers(this.headers),\n\t      url: this.url\n\t    })\n\t  }\n\t\n\t  Response.error = function() {\n\t    var response = new Response(null, {status: 0, statusText: ''})\n\t    response.type = 'error'\n\t    return response\n\t  }\n\t\n\t  var redirectStatuses = [301, 302, 303, 307, 308]\n\t\n\t  Response.redirect = function(url, status) {\n\t    if (redirectStatuses.indexOf(status) === -1) {\n\t      throw new RangeError('Invalid status code')\n\t    }\n\t\n\t    return new Response(null, {status: status, headers: {location: url}})\n\t  }\n\t\n\t  self.Headers = Headers\n\t  self.Request = Request\n\t  self.Response = Response\n\t\n\t  self.fetch = function(input, init) {\n\t    return new Promise(function(resolve, reject) {\n\t      var request = new Request(input, init)\n\t      var xhr = new XMLHttpRequest()\n\t\n\t      xhr.onload = function() {\n\t        var options = {\n\t          status: xhr.status,\n\t          statusText: xhr.statusText,\n\t          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n\t        }\n\t        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')\n\t        var body = 'response' in xhr ? xhr.response : xhr.responseText\n\t        resolve(new Response(body, options))\n\t      }\n\t\n\t      xhr.onerror = function() {\n\t        reject(new TypeError('Network request failed'))\n\t      }\n\t\n\t      xhr.ontimeout = function() {\n\t        reject(new TypeError('Network request failed'))\n\t      }\n\t\n\t      xhr.open(request.method, request.url, true)\n\t\n\t      if (request.credentials === 'include') {\n\t        xhr.withCredentials = true\n\t      }\n\t\n\t      if ('responseType' in xhr && support.blob) {\n\t        xhr.responseType = 'blob'\n\t      }\n\t\n\t      request.headers.forEach(function(value, name) {\n\t        xhr.setRequestHeader(name, value)\n\t      })\n\t\n\t      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n\t    })\n\t  }\n\t  self.fetch.polyfill = true\n\t})(typeof self !== 'undefined' ? self : this);\n\n\n/***/ }\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// app.bundle.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/build/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 5a594a14d2d31bb03dc7","import fetch from 'isomorphic-fetch'\nimport * as styles from './app.css'\nimport reverb from 'arraybuffer!./AbernyteGrainSilo.m4a'\nimport view from './view.html'\n\n/**\n * Audio.\n */\nconst audioCtx = new window.AudioContext()\n\n/**\n * App state.\n */\nconst state = {\n  currentScale: [\n    {name: 'c', disabled: false},\n    {name: 'c#', disabled: false},\n    {name: 'd', disabled: false},\n    {name: 'd#', disabled: false},\n    {name: 'e', disabled: false},\n    {name: 'f', disabled: false},\n    {name: 'f#', disabled: false},\n    {name: 'g', disabled: false},\n    {name: 'g#', disabled: false},\n    {name: 'a', disabled: false},\n    {name: 'a#', disabled: false},\n    {name: 'b', disabled: false}\n  ],\n  clampToNote: false,\n  convolver: audioCtx.createConvolver(),\n  curNotes: [],\n  gain: audioCtx.createGain(),\n  oscillator: audioCtx.createOscillator(),\n  waves: [\n    'sine',\n    'square',\n    'sawtooth',\n    'triangle'\n  ],\n  overlayVisible: true,\n  // view: document.createElement('div'),\n  viewEls: {\n    allowedNotes: view.querySelector('#allowed-notes'),\n    bufferSrc: view.querySelector('#custom-buffer-source'),\n    clampToNote: view.querySelector('#clamp-to-note'),\n    controls: view.querySelector('#controls'),\n    vibratoAmplitube: view.querySelector('#vibrato-amplitude'),\n    vibratoRate: view.querySelector('#vibrato-rate'),\n    noteDisplay: view.querySelector('#note-display'),\n    overlay: view.querySelector('#overlay'),\n    toggleVibrato: view.querySelector('#enable-vibrato'),\n    waves: view.querySelector('#waves')\n  },\n  vibrato: { dir: 1, val: 1, rate: 10, amplitude: 5, interval: () => {} }\n}\n\n/**\n * Audio.\n */\nfunction initAudio (shouldDisconnect) {\n  audioCtx.decodeAudioData(reverb)\n  .then((data) => {\n    if (shouldDisconnect) {\n      state.convolver.disconnect(state.gain)\n    }\n    state.convolver.buffer = data\n    state.convolver.connect(state.gain)\n    state.oscillator.connect(state.gain)\n    state.gain.connect(audioCtx.destination)\n    state.oscillator.frequency.value = 0\n    state.oscillator.start()\n  })\n}\n\n/**\n * Fetch frequency data.\n */\nfunction getNotes () {\n  fetch('/src/music-freqs.json')\n  .then((resp) => {\n    return resp.json()\n  })\n  .then((resp) => {\n    state.curNotes = resp\n  })\n}\n\n/**\n * View.\n */\nfunction initView () {\n  // View parent\n  view.classList.add(styles.view)\n  // Overlay\n  state.viewEls.overlay.classList.add(styles.overlay)\n  state.viewEls.overlay.addEventListener('click', (e) => {\n    e.target.remove()\n    initAudio()\n  })\n  // Controls\n  state.viewEls.controls.classList.add(styles.controls)\n  // Add allowed notes\n  state.viewEls.allowedNotes.classList.add(styles.notes)\n  state.currentScale\n    .map((note, idx) => {\n      const el = document.createElement('div')\n      const label = document.createElement('label')\n      const input = document.createElement('input')\n      label.innerHTML = note.name\n      input.type = 'checkbox'\n      input.setAttribute('checked', true)\n      el.appendChild(label)\n      el.appendChild(input)\n      input.addEventListener('click', (e) => {\n        state.currentScale[idx].disabled = !input.checked\n      })\n      return el\n    })\n    .reduce((init, cur) => {\n      state.viewEls.allowedNotes.appendChild(cur)\n      return init\n    }, [])\n  // Add waves\n  state.viewEls.waves.innerHTML = state.waves.map((wave) => {\n    return `<option value=\"${wave}\">${wave}</option>`\n  }).join('')\n  state.viewEls.waves.addEventListener('click', (e) => {\n    state.gain.gain.value = 0\n  })\n  state.viewEls.waves.addEventListener('change', (e) => {\n    state.oscillator.type = e.target.value\n  })\n\n  state.viewEls.clampToNote.addEventListener('click', (e) => {\n    state.clampToNote = !state.clampToNote\n  })\n  state.viewEls.bufferSrc.addEventListener('submit', (e) => {\n    e.preventDefault()\n    // setBuffer(state.convolver, bufferInput.value)\n  })\n  state.viewEls.toggleVibrato.addEventListener('click', () => {\n    setVibrato()\n  })\n\n  state.viewEls.vibratoRate.value = state.vibrato.rate\n  state.viewEls.vibratoAmplitube.value = state.vibrato.amplitude\n  state.viewEls.vibratoRate.addEventListener('change', () => {\n    setVibrato(setVibrato(state.viewEls.vibratoRate.value))\n  })\n  state.viewEls.vibratoAmplitube.addEventListener('change', () => {\n    setVibrato(state.vibrato.rate, state.viewEls.vibratoAmplitube.value)\n  })\n  document.body.appendChild(view)\n}\n\nfunction setVibrato (rate, ampl) {\n  if (rate || ampl) {\n    clearInterval(state.vibrato.interval)\n    state.vibrato.rate = rate\n    state.vibrato.amplitude = ampl\n    state.vibrato.interval = setInterval(vibrato, state.vibrato.rate)\n  } else if (state.viewEls.toggleVibrato.checked) {\n    state.vibrato.interval = setInterval(vibrato, state.vibrato.rate)\n  } else {\n    clearInterval(state.vibrato.interval)\n  }\n}\n\nfunction setBackround (x, y) {\n  view.style.background = `hsla(${x}, ${y}%, 50%, 1)`\n}\n\nfunction step (e) {\n  const activeScale = state.currentScale.filter(note => !note.disabled).map(note => note.name)\n  const vol = (-1 * e.clientY / window.innerHeight) + 1\n  state.gain.gain.value = state.oscillator.type === 'sine' || state.oscillator.type === 'triangle'\n    ? vol\n    : vol / 10\n  const freq = (e.clientX / window.innerWidth * 440) + 100\n  const curNote = state.clampToNote ? state.curNotes.reduce((acc, cur) => {\n    const isNatural = cur.note.length === 2\n    if (Array.isArray(acc)) {\n      if (activeScale.indexOf(cur.note.substr(0, (isNatural ? 1 : 2))) !== -1 && cur.frequency < freq) {\n        acc.push(cur)\n      }\n      if (activeScale.indexOf(cur.note.substr(0, (isNatural ? 1 : 2))) !== -1 && cur.frequency > freq) {\n        acc = acc[acc.length - 1]\n      }\n    }\n    return acc\n  }, [])\n    : { frequency: freq, note: 'n/a' }\n  state.oscillator.frequency.value = curNote.frequency\n  state.viewEls.noteDisplay.innerHTML = `Current note: ${curNote.note}`\n  setBackround(240 + (e.clientX / window.innerWidth * 100), vol * 100)\n  /**\n   * rAF Makes Chrome sound terrible.\n   */\n  // window.requestAnimationFrame(step.bind(null, e))\n}\n\nfunction vibrato () {\n  state.oscillator.detune.value = state.oscillator.detune.value + state.vibrato.val\n  if (Math.abs(state.vibrato.val) > state.vibrato.amplitude) {\n    state.vibrato = { ...state.vibrato, dir: state.vibrato.dir * -1, val: state.vibrato.val - (state.vibrato.dir * 1) }\n  } else {\n    state.vibrato.val = state.vibrato.val + (state.vibrato.dir * 1)\n  }\n}\n\n(function theremin () {\n  getNotes()\n  initView()\n  document.addEventListener('mousemove', step)\n})()\n\nif (module.hot) {\n  module.hot.accept()\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app.js","module.exports = require(\"./../node_modules/arraybuffer-loader/lib/to-array-buffer.js\")(\"\")\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/arraybuffer-loader!./src/AbernyteGrainSilo.m4a\n// module id = 1\n// module chunks = 0","'use strict'\n\n// * To be run on any browser\nmodule.exports = function (base64Data) {\n  var binary = window.atob(base64Data)\n  var bytes  = new Uint8Array(binary.length)\n\n  for (var i = 0; i < binary.length; ++i) {\n    bytes[i] = binary.charCodeAt(i)\n  }\n\n  return bytes.buffer\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/arraybuffer-loader/lib/to-array-buffer.js\n// module id = 2\n// module chunks = 0","exports = module.exports = require(\"./../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \"html{box-sizing:border-box}*,:after,:before{box-sizing:inherit}body{color:#fff;cursor:crosshair;font-family:monospace;margin:0;text-shadow:1px 0 0 #111,0 1px 0 #111,-1px 0 0 #111,0 -1px 0 #111}.app__view__1ORZ5{height:100vh;overflow:hidden;width:100vw}h1{text-align:center}.app__controls__vqhHa{align-items:stretch;border-top:1px solid #111;bottom:0;color:#fff;padding:1em;display:flex;font-size:1.5rem;flex-wrap:wrap;justify-content:space-around;position:fixed;width:100%}.app__controls__vqhHa>*{align-items:center;display:flex;flex:0 1 auto;justify-content:center}.app__controls__vqhHa select{align-self:center}.app__currentNote__2wMcs{width:33%}.app__notes__2Tggs{justify-content:center;width:100%}.app__notes__2Tggs>*{margin-right:1em}.app__notes__2Tggs>:last-child{margin-right:0}.app__overlay__31cgC{align-items:center;background:#111;display:flex;font-size:3em;height:100vh;padding:1em;position:absolute;top:0;width:100vw;z-index:1}\", \"\"]);\n\n// exports\nexports.locals = {\n\t\"view\": \"app__view__1ORZ5\",\n\t\"controls\": \"app__controls__vqhHa\",\n\t\"currentNote\": \"app__currentNote__2wMcs\",\n\t\"notes\": \"app__notes__2Tggs\",\n\t\"overlay\": \"app__overlay__31cgC\"\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader?modules&localIdentName=[name]__[local]__[hash:base64:5]!./~/postcss-loader!./src/app.css\n// module id = 3\n// module chunks = 0","/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\n// css base code, injected by the css-loader\r\nmodule.exports = function() {\r\n\tvar list = [];\r\n\r\n\t// return the list of modules as css string\r\n\tlist.toString = function toString() {\r\n\t\tvar result = [];\r\n\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\tvar item = this[i];\r\n\t\t\tif(item[2]) {\r\n\t\t\t\tresult.push(\"@media \" + item[2] + \"{\" + item[1] + \"}\");\r\n\t\t\t} else {\r\n\t\t\t\tresult.push(item[1]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result.join(\"\");\r\n\t};\r\n\r\n\t// import a list of modules into the list\r\n\tlist.i = function(modules, mediaQuery) {\r\n\t\tif(typeof modules === \"string\")\r\n\t\t\tmodules = [[null, modules, \"\"]];\r\n\t\tvar alreadyImportedModules = {};\r\n\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\tvar id = this[i][0];\r\n\t\t\tif(typeof id === \"number\")\r\n\t\t\t\talreadyImportedModules[id] = true;\r\n\t\t}\r\n\t\tfor(i = 0; i < modules.length; i++) {\r\n\t\t\tvar item = modules[i];\r\n\t\t\t// skip already imported module\r\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\r\n\t\t\t//  when a module is imported multiple times with different media queries.\r\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\r\n\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\r\n\t\t\t\tif(mediaQuery && !item[2]) {\r\n\t\t\t\t\titem[2] = mediaQuery;\r\n\t\t\t\t} else if(mediaQuery) {\r\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\r\n\t\t\t\t}\r\n\t\t\t\tlist.push(item);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\treturn list;\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader/lib/css-base.js\n// module id = 4\n// module chunks = 0","module.exports = \"<div id=overlay>Heads up! This thing makes noise. It shouldn't be too loud, but consider turning down your speakers or headphones just in case. Click anywhere to begin.</div> <div id=theremin></div> <div id=controls> <label for=clamp-to-note>Clamp to note?</label> <input id=clamp-to-note type=checkbox> <form action=\\\"\\\"> <label for=custom-buffer-source>Set a custom buffer source</label> <input id=custom-buffer-source type=text placeholder=\\\"Paste a URL to an audio file to use a the buffer\\\"> <button type=submit>Get</button> </form> <form id=vibrato-settings action=\\\"\\\"> <label for=enable-vibrato>Enable vibrato?</label> <input id=enable-vibrato type=checkbox> <label for=vibrato-rate>Vibrato rate</label> <input id=vibrato-rate type=number> <label for=vibrato-amplitude>Vibrato amplitude</label> <input id=vibrato-amplitude type=number> </form> <select name=\\\"\\\" id=waves></select> <p id=note-display></p> <div id=allowed-notes></div> </div> \";\nvar elm = document.createElement(\"div\");\nelm.innerHTML = module.exports;\nmodule.exports = elm;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view.html\n// module id = 5\n// module chunks = 0","// the whatwg-fetch polyfill installs the fetch() function\n// on the global object (window or self)\n//\n// Return that as the export for use in Webpack, Browserify etc.\nrequire('whatwg-fetch');\nmodule.exports = self.fetch.bind(self);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/isomorphic-fetch/fetch-npm-browserify.js\n// module id = 6\n// module chunks = 0","/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\nvar stylesInDom = {},\r\n\tmemoize = function(fn) {\r\n\t\tvar memo;\r\n\t\treturn function () {\r\n\t\t\tif (typeof memo === \"undefined\") memo = fn.apply(this, arguments);\r\n\t\t\treturn memo;\r\n\t\t};\r\n\t},\r\n\tisOldIE = memoize(function() {\r\n\t\treturn /msie [6-9]\\b/.test(window.navigator.userAgent.toLowerCase());\r\n\t}),\r\n\tgetHeadElement = memoize(function () {\r\n\t\treturn document.head || document.getElementsByTagName(\"head\")[0];\r\n\t}),\r\n\tsingletonElement = null,\r\n\tsingletonCounter = 0,\r\n\tstyleElementsInsertedAtTop = [];\r\n\r\nmodule.exports = function(list, options) {\r\n\tif(typeof DEBUG !== \"undefined\" && DEBUG) {\r\n\t\tif(typeof document !== \"object\") throw new Error(\"The style-loader cannot be used in a non-browser environment\");\r\n\t}\r\n\r\n\toptions = options || {};\r\n\t// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\r\n\t// tags it will allow on a page\r\n\tif (typeof options.singleton === \"undefined\") options.singleton = isOldIE();\r\n\r\n\t// By default, add <style> tags to the bottom of <head>.\r\n\tif (typeof options.insertAt === \"undefined\") options.insertAt = \"bottom\";\r\n\r\n\tvar styles = listToStyles(list);\r\n\taddStylesToDom(styles, options);\r\n\r\n\treturn function update(newList) {\r\n\t\tvar mayRemove = [];\r\n\t\tfor(var i = 0; i < styles.length; i++) {\r\n\t\t\tvar item = styles[i];\r\n\t\t\tvar domStyle = stylesInDom[item.id];\r\n\t\t\tdomStyle.refs--;\r\n\t\t\tmayRemove.push(domStyle);\r\n\t\t}\r\n\t\tif(newList) {\r\n\t\t\tvar newStyles = listToStyles(newList);\r\n\t\t\taddStylesToDom(newStyles, options);\r\n\t\t}\r\n\t\tfor(var i = 0; i < mayRemove.length; i++) {\r\n\t\t\tvar domStyle = mayRemove[i];\r\n\t\t\tif(domStyle.refs === 0) {\r\n\t\t\t\tfor(var j = 0; j < domStyle.parts.length; j++)\r\n\t\t\t\t\tdomStyle.parts[j]();\r\n\t\t\t\tdelete stylesInDom[domStyle.id];\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n}\r\n\r\nfunction addStylesToDom(styles, options) {\r\n\tfor(var i = 0; i < styles.length; i++) {\r\n\t\tvar item = styles[i];\r\n\t\tvar domStyle = stylesInDom[item.id];\r\n\t\tif(domStyle) {\r\n\t\t\tdomStyle.refs++;\r\n\t\t\tfor(var j = 0; j < domStyle.parts.length; j++) {\r\n\t\t\t\tdomStyle.parts[j](item.parts[j]);\r\n\t\t\t}\r\n\t\t\tfor(; j < item.parts.length; j++) {\r\n\t\t\t\tdomStyle.parts.push(addStyle(item.parts[j], options));\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tvar parts = [];\r\n\t\t\tfor(var j = 0; j < item.parts.length; j++) {\r\n\t\t\t\tparts.push(addStyle(item.parts[j], options));\r\n\t\t\t}\r\n\t\t\tstylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction listToStyles(list) {\r\n\tvar styles = [];\r\n\tvar newStyles = {};\r\n\tfor(var i = 0; i < list.length; i++) {\r\n\t\tvar item = list[i];\r\n\t\tvar id = item[0];\r\n\t\tvar css = item[1];\r\n\t\tvar media = item[2];\r\n\t\tvar sourceMap = item[3];\r\n\t\tvar part = {css: css, media: media, sourceMap: sourceMap};\r\n\t\tif(!newStyles[id])\r\n\t\t\tstyles.push(newStyles[id] = {id: id, parts: [part]});\r\n\t\telse\r\n\t\t\tnewStyles[id].parts.push(part);\r\n\t}\r\n\treturn styles;\r\n}\r\n\r\nfunction insertStyleElement(options, styleElement) {\r\n\tvar head = getHeadElement();\r\n\tvar lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];\r\n\tif (options.insertAt === \"top\") {\r\n\t\tif(!lastStyleElementInsertedAtTop) {\r\n\t\t\thead.insertBefore(styleElement, head.firstChild);\r\n\t\t} else if(lastStyleElementInsertedAtTop.nextSibling) {\r\n\t\t\thead.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);\r\n\t\t} else {\r\n\t\t\thead.appendChild(styleElement);\r\n\t\t}\r\n\t\tstyleElementsInsertedAtTop.push(styleElement);\r\n\t} else if (options.insertAt === \"bottom\") {\r\n\t\thead.appendChild(styleElement);\r\n\t} else {\r\n\t\tthrow new Error(\"Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.\");\r\n\t}\r\n}\r\n\r\nfunction removeStyleElement(styleElement) {\r\n\tstyleElement.parentNode.removeChild(styleElement);\r\n\tvar idx = styleElementsInsertedAtTop.indexOf(styleElement);\r\n\tif(idx >= 0) {\r\n\t\tstyleElementsInsertedAtTop.splice(idx, 1);\r\n\t}\r\n}\r\n\r\nfunction createStyleElement(options) {\r\n\tvar styleElement = document.createElement(\"style\");\r\n\tstyleElement.type = \"text/css\";\r\n\tinsertStyleElement(options, styleElement);\r\n\treturn styleElement;\r\n}\r\n\r\nfunction createLinkElement(options) {\r\n\tvar linkElement = document.createElement(\"link\");\r\n\tlinkElement.rel = \"stylesheet\";\r\n\tinsertStyleElement(options, linkElement);\r\n\treturn linkElement;\r\n}\r\n\r\nfunction addStyle(obj, options) {\r\n\tvar styleElement, update, remove;\r\n\r\n\tif (options.singleton) {\r\n\t\tvar styleIndex = singletonCounter++;\r\n\t\tstyleElement = singletonElement || (singletonElement = createStyleElement(options));\r\n\t\tupdate = applyToSingletonTag.bind(null, styleElement, styleIndex, false);\r\n\t\tremove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);\r\n\t} else if(obj.sourceMap &&\r\n\t\ttypeof URL === \"function\" &&\r\n\t\ttypeof URL.createObjectURL === \"function\" &&\r\n\t\ttypeof URL.revokeObjectURL === \"function\" &&\r\n\t\ttypeof Blob === \"function\" &&\r\n\t\ttypeof btoa === \"function\") {\r\n\t\tstyleElement = createLinkElement(options);\r\n\t\tupdate = updateLink.bind(null, styleElement);\r\n\t\tremove = function() {\r\n\t\t\tremoveStyleElement(styleElement);\r\n\t\t\tif(styleElement.href)\r\n\t\t\t\tURL.revokeObjectURL(styleElement.href);\r\n\t\t};\r\n\t} else {\r\n\t\tstyleElement = createStyleElement(options);\r\n\t\tupdate = applyToTag.bind(null, styleElement);\r\n\t\tremove = function() {\r\n\t\t\tremoveStyleElement(styleElement);\r\n\t\t};\r\n\t}\r\n\r\n\tupdate(obj);\r\n\r\n\treturn function updateStyle(newObj) {\r\n\t\tif(newObj) {\r\n\t\t\tif(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)\r\n\t\t\t\treturn;\r\n\t\t\tupdate(obj = newObj);\r\n\t\t} else {\r\n\t\t\tremove();\r\n\t\t}\r\n\t};\r\n}\r\n\r\nvar replaceText = (function () {\r\n\tvar textStore = [];\r\n\r\n\treturn function (index, replacement) {\r\n\t\ttextStore[index] = replacement;\r\n\t\treturn textStore.filter(Boolean).join('\\n');\r\n\t};\r\n})();\r\n\r\nfunction applyToSingletonTag(styleElement, index, remove, obj) {\r\n\tvar css = remove ? \"\" : obj.css;\r\n\r\n\tif (styleElement.styleSheet) {\r\n\t\tstyleElement.styleSheet.cssText = replaceText(index, css);\r\n\t} else {\r\n\t\tvar cssNode = document.createTextNode(css);\r\n\t\tvar childNodes = styleElement.childNodes;\r\n\t\tif (childNodes[index]) styleElement.removeChild(childNodes[index]);\r\n\t\tif (childNodes.length) {\r\n\t\t\tstyleElement.insertBefore(cssNode, childNodes[index]);\r\n\t\t} else {\r\n\t\t\tstyleElement.appendChild(cssNode);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction applyToTag(styleElement, obj) {\r\n\tvar css = obj.css;\r\n\tvar media = obj.media;\r\n\r\n\tif(media) {\r\n\t\tstyleElement.setAttribute(\"media\", media)\r\n\t}\r\n\r\n\tif(styleElement.styleSheet) {\r\n\t\tstyleElement.styleSheet.cssText = css;\r\n\t} else {\r\n\t\twhile(styleElement.firstChild) {\r\n\t\t\tstyleElement.removeChild(styleElement.firstChild);\r\n\t\t}\r\n\t\tstyleElement.appendChild(document.createTextNode(css));\r\n\t}\r\n}\r\n\r\nfunction updateLink(linkElement, obj) {\r\n\tvar css = obj.css;\r\n\tvar sourceMap = obj.sourceMap;\r\n\r\n\tif(sourceMap) {\r\n\t\t// http://stackoverflow.com/a/26603875\r\n\t\tcss += \"\\n/*# sourceMappingURL=data:application/json;base64,\" + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + \" */\";\r\n\t}\r\n\r\n\tvar blob = new Blob([css], { type: \"text/css\" });\r\n\r\n\tvar oldSrc = linkElement.href;\r\n\r\n\tlinkElement.href = URL.createObjectURL(blob);\r\n\r\n\tif(oldSrc)\r\n\t\tURL.revokeObjectURL(oldSrc);\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/style-loader/addStyles.js\n// module id = 7\n// module chunks = 0","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!./../node_modules/css-loader/index.js?modules&localIdentName=[name]__[local]__[hash:base64:5]!./../node_modules/postcss-loader/index.js!./app.css\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!./../node_modules/style-loader/addStyles.js\")(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!./../node_modules/css-loader/index.js?modules&localIdentName=[name]__[local]__[hash:base64:5]!./../node_modules/postcss-loader/index.js!./app.css\", function() {\n\t\t\tvar newContent = require(\"!!./../node_modules/css-loader/index.js?modules&localIdentName=[name]__[local]__[hash:base64:5]!./../node_modules/postcss-loader/index.js!./app.css\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app.css\n// module id = 8\n// module chunks = 0","(function(self) {\n  'use strict';\n\n  if (self.fetch) {\n    return\n  }\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob: 'FileReader' in self && 'Blob' in self && (function() {\n      try {\n        new Blob()\n        return true\n      } catch(e) {\n        return false\n      }\n    })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ]\n\n    var isDataView = function(obj) {\n      return obj && DataView.prototype.isPrototypeOf(obj)\n    }\n\n    var isArrayBufferView = ArrayBuffer.isView || function(obj) {\n      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n    }\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name)\n    }\n    if (/[^a-z0-9\\-#$%&'*+.\\^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value)\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift()\n        return {done: value === undefined, value: value}\n      }\n    }\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      }\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {}\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value)\n      }, this)\n\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name])\n      }, this)\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name)\n    value = normalizeValue(value)\n    var oldValue = this.map[name]\n    this.map[name] = oldValue ? oldValue+','+value : value\n  }\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)]\n  }\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name)\n    return this.has(name) ? this.map[name] : null\n  }\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  }\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value)\n  }\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this)\n      }\n    }\n  }\n\n  Headers.prototype.keys = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push(name) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.values = function() {\n    var items = []\n    this.forEach(function(value) { items.push(value) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.entries = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push([name, value]) })\n    return iteratorFor(items)\n  }\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result)\n      }\n      reader.onerror = function() {\n        reject(reader.error)\n      }\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader()\n    var promise = fileReaderReady(reader)\n    reader.readAsArrayBuffer(blob)\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader()\n    var promise = fileReaderReady(reader)\n    reader.readAsText(blob)\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf)\n    var chars = new Array(view.length)\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i])\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength)\n      view.set(new Uint8Array(buf))\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false\n\n    this._initBody = function(body) {\n      this._bodyInit = body\n      if (!body) {\n        this._bodyText = ''\n      } else if (typeof body === 'string') {\n        this._bodyText = body\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString()\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer)\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer])\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body)\n      } else {\n        throw new Error('unsupported BodyInit type')\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8')\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type)\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')\n        }\n      }\n    }\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this)\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      }\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      }\n    }\n\n    this.text = function() {\n      var rejected = consumed(this)\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    }\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      }\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    }\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase()\n    return (methods.indexOf(upcased) > -1) ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {}\n    var body = options.body\n\n    if (typeof input === 'string') {\n      this.url = input\n    } else {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url\n      this.credentials = input.credentials\n      if (!options.headers) {\n        this.headers = new Headers(input.headers)\n      }\n      this.method = input.method\n      this.mode = input.mode\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit\n        input.bodyUsed = true\n      }\n    }\n\n    this.credentials = options.credentials || this.credentials || 'omit'\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers)\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET')\n    this.mode = options.mode || this.mode || null\n    this.referrer = null\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body)\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, { body: this._bodyInit })\n  }\n\n  function decode(body) {\n    var form = new FormData()\n    body.trim().split('&').forEach(function(bytes) {\n      if (bytes) {\n        var split = bytes.split('=')\n        var name = split.shift().replace(/\\+/g, ' ')\n        var value = split.join('=').replace(/\\+/g, ' ')\n        form.append(decodeURIComponent(name), decodeURIComponent(value))\n      }\n    })\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers()\n    rawHeaders.split('\\r\\n').forEach(function(line) {\n      var parts = line.split(':')\n      var key = parts.shift().trim()\n      if (key) {\n        var value = parts.join(':').trim()\n        headers.append(key, value)\n      }\n    })\n    return headers\n  }\n\n  Body.call(Request.prototype)\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {}\n    }\n\n    this.type = 'default'\n    this.status = 'status' in options ? options.status : 200\n    this.ok = this.status >= 200 && this.status < 300\n    this.statusText = 'statusText' in options ? options.statusText : 'OK'\n    this.headers = new Headers(options.headers)\n    this.url = options.url || ''\n    this._initBody(bodyInit)\n  }\n\n  Body.call(Response.prototype)\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  }\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''})\n    response.type = 'error'\n    return response\n  }\n\n  var redirectStatuses = [301, 302, 303, 307, 308]\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  }\n\n  self.Headers = Headers\n  self.Request = Request\n  self.Response = Response\n\n  self.fetch = function(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init)\n      var xhr = new XMLHttpRequest()\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        }\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')\n        var body = 'response' in xhr ? xhr.response : xhr.responseText\n        resolve(new Response(body, options))\n      }\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.open(request.method, request.url, true)\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob'\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value)\n      })\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n    })\n  }\n  self.fetch.polyfill = true\n})(typeof self !== 'undefined' ? self : this);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/whatwg-fetch/fetch.js\n// module id = 9\n// module chunks = 0"],"sourceRoot":""}